/**
 * üéõÔ∏è PROMPTS INTELIGENTES PARA THE GENERATOR
 * 
 * Genera prompts creativos para arreglos en The Generator
 */

import { Handler } from '@netlify/functions';

interface GeneratorPromptRequest {
  prompt: string;
  style: string;
  genre: string;
  mood: string;
  creativityLevel?: 'conservative' | 'moderate' | 'creative' | 'experimental';
  targetInstrumentation?: string[];
  arrangementGoals?: string[];
  userId?: string;
}

interface GeneratorPromptResponse {
  basePrompt: string;
  enhancedPrompt: string;
  creativePrompt: string;
  technicalPrompt: string;
  arrangementSuggestions: Array<{
    section: string;
    suggestion: string;
    confidence: number;
  }>;
  instrumentation: {
    primary: string[];
    secondary: string[];
    effects: string[];
  };
  creativeElements: string[];
  technicalSpecs: {
    tempo: string;
    key: string;
    timeSignature: string;
    dynamics: string;
  };
  confidence: number;
}

// üéõÔ∏è FUNCI√ìN PRINCIPAL
export const handler: Handler = async (event) => {
  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ error: 'Method not allowed' })
    };
  }

  try {
    const request: GeneratorPromptRequest = JSON.parse(event.body || '{}');

    if (!request.prompt) {
      return {
        statusCode: 400,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ error: 'Prompt is required' })
      };
    }

    // üéØ GENERAR PROMPTS INTELIGENTES
    const promptResponse = await generateIntelligentPrompts(request);

    // üíæ GUARDAR EN SUPABASE
    if (request.userId) {
      await savePromptsToSupabase(request.userId, promptResponse, request);
    }

    return {
      statusCode: 200,
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(promptResponse)
    };

  } catch (error) {
    console.error('Error generating intelligent prompts:', error);
    return {
      statusCode: 500,
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        error: 'Internal server error',
        details: error instanceof Error ? error.message : 'Unknown error'
      })
    };
  }
};

// üß† GENERAR PROMPTS INTELIGENTES CON QWEN 2
async function generateIntelligentPrompts(request: GeneratorPromptRequest): Promise<GeneratorPromptResponse> {
  const qwenApiKey = process.env.QWEN_API_KEY;
  
  if (!qwenApiKey) {
    throw new Error('QWEN_API_KEY not configured');
  }

  const { prompt, style, genre, mood, creativityLevel = 'moderate', targetInstrumentation, arrangementGoals } = request;

  // üéõÔ∏è PROMPT PARA THE GENERATOR
  const generatorPrompt = `Eres un productor musical experto y arreglista creativo especializado en The Generator de Son1kverse.

Crea prompts inteligentes para esta canci√≥n:
- Tema: ${prompt}
- Estilo: ${style}
- G√©nero: ${genre}
- Estado de √°nimo: ${mood}
- Nivel de creatividad: ${creativityLevel}

${targetInstrumentation ? `Instrumentaci√≥n objetivo: ${targetInstrumentation.join(', ')}` : ''}
${arrangementGoals ? `Objetivos de arreglo: ${arrangementGoals.join(', ')}` : ''}

Genera m√∫ltiples tipos de prompts:

1. **Prompt Base**: Versi√≥n simple y directa
2. **Prompt Mejorado**: Versi√≥n m√°s detallada y t√©cnica
3. **Prompt Creativo**: Versi√≥n con elementos innovadores
4. **Prompt T√©cnico**: Versi√≥n con especificaciones t√©cnicas

Tambi√©n incluye:
- **Sugerencias de arreglo** por secci√≥n (intro, verso, coro, puente, outro)
- **Instrumentaci√≥n** (primaria, secundaria, efectos)
- **Elementos creativos** espec√≠ficos
- **Especificaciones t√©cnicas** (tempo, tonalidad, comp√°s, din√°micas)
- **Nivel de confianza** en las sugerencias

Responde en formato JSON estructurado.`;

  try {
    const response = await fetch('https://dashscope.aliyuncs.com/api/v1/services/aigc/text-generation/generation', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${qwenApiKey}`,
        'X-DashScope-SSE': 'enable'
      },
      body: JSON.stringify({
        model: 'qwen-turbo',
        input: {
          messages: [
            {
              role: 'system',
              content: generatorPrompt
            },
            {
              role: 'user',
              content: `Genera prompts inteligentes para The Generator con nivel de creatividad ${creativityLevel}.`
            }
          ]
        },
        parameters: {
          temperature: creativityLevel === 'experimental' ? 0.9 : 
                      creativityLevel === 'creative' ? 0.7 : 
                      creativityLevel === 'moderate' ? 0.5 : 0.3,
          max_tokens: 3000
        }
      })
    });

    if (!response.ok) {
      throw new Error(`Qwen API error: ${response.status}`);
    }

    const data = await response.json();
    const promptText = data.output?.text || '';

    // üîç PARSEAR RESPUESTA JSON
    const promptResponse = parsePromptResponse(promptText, request);

    return promptResponse;

  } catch (error) {
    console.error('Error calling Qwen API:', error);
    
    // üéØ FALLBACK: PROMPTS SIMULADOS
    return generateFallbackPrompts(request);
  }
}

// üîç PARSEAR RESPUESTA DE PROMPTS
function parsePromptResponse(promptText: string, request: GeneratorPromptRequest): GeneratorPromptResponse {
  try {
    // Intentar extraer JSON de la respuesta
    const jsonMatch = promptText.match(/\{[\s\S]*\}/);
    if (jsonMatch) {
      return JSON.parse(jsonMatch[0]);
    }
  } catch (error) {
    console.error('Error parsing prompt response:', error);
  }

  // üéØ FALLBACK: PROMPTS SIMULADOS
  return generateFallbackPrompts(request);
}

// üéõÔ∏è PROMPTS SIMULADOS (FALLBACK)
function generateFallbackPrompts(request: GeneratorPromptRequest): GeneratorPromptResponse {
  const { prompt, style, genre, mood, creativityLevel } = request;

  const basePrompt = `Genera una canci√≥n de ${style} con tema "${prompt}" en estilo ${genre}`;
  
  const enhancedPrompt = `${basePrompt}. 
  
Especificaciones:
- Estado de √°nimo: ${mood}
- Estructura: Intro ‚Üí Verso ‚Üí Pre-Coro ‚Üí Coro ‚Üí Verso ‚Üí Coro ‚Üí Puente ‚Üí Coro
- Din√°micas: Crescendo en pre-coros, m√°ximo impacto en coros
- Instrumentaci√≥n: Guitarra, bajo, bater√≠a, sintetizadores`;

  const creativePrompt = `${enhancedPrompt}

Elementos creativos:
- Modulaci√≥n en el puente
- Efectos de delay en las voces
- Arp√©ggios de sintetizador
- Percusi√≥n √©tnica
- Cambios de tempo sutiles`;

  const technicalPrompt = `${creativePrompt}

Especificaciones t√©cnicas:
- Tempo: 120-140 BPM
- Tonalidad: C mayor o A menor
- Comp√°s: 4/4
- Din√°micas: pp ‚Üí mf ‚Üí f ‚Üí ff`;

  const arrangementSuggestions = generateArrangementSuggestions(creativityLevel);
  const instrumentation = generateInstrumentation(style, genre);
  const creativeElements = generateCreativeElements(creativityLevel);
  const technicalSpecs = generateTechnicalSpecs(style, mood);

  return {
    basePrompt,
    enhancedPrompt,
    creativePrompt,
    technicalPrompt,
    arrangementSuggestions,
    instrumentation,
    creativeElements,
    technicalSpecs,
    confidence: 80
  };
}

// üéµ GENERAR SUGERENCIAS DE ARREGLO
function generateArrangementSuggestions(creativityLevel: string) {
  const suggestions = {
    conservative: [
      { section: 'Intro', suggestion: 'Entrada suave con guitarra ac√∫stica', confidence: 90 },
      { section: 'Verso', suggestion: 'Ritmo estable con elementos b√°sicos', confidence: 85 },
      { section: 'Pre-Coro', suggestion: 'Crescendo gradual hacia el coro', confidence: 80 },
      { section: 'Coro', suggestion: 'M√°xima energ√≠a con todos los instrumentos', confidence: 90 },
      { section: 'Puente', suggestion: 'Cambio de din√°mica con elementos minimalistas', confidence: 75 },
      { section: 'Outro', suggestion: 'Fade-out suave y elegante', confidence: 85 }
    ],
    moderate: [
      { section: 'Intro', suggestion: 'Entrada atmosf√©rica con sintetizadores', confidence: 85 },
      { section: 'Verso', suggestion: 'Ritmo con variaciones sutiles', confidence: 80 },
      { section: 'Pre-Coro', suggestion: 'Crescendo con efectos de delay', confidence: 85 },
      { section: 'Coro', suggestion: 'Impacto m√°ximo con capas instrumentales', confidence: 90 },
      { section: 'Puente', suggestion: 'Cambio de tonalidad y ritmo', confidence: 80 },
      { section: 'Outro', suggestion: 'Cierre dram√°tico con elementos ambientales', confidence: 85 }
    ],
    creative: [
      { section: 'Intro', suggestion: 'Entrada experimental con samples', confidence: 80 },
      { section: 'Verso', suggestion: 'Ritmo con cambios de comp√°s', confidence: 75 },
      { section: 'Pre-Coro', suggestion: 'Crescendo con modulaciones', confidence: 80 },
      { section: 'Coro', suggestion: 'Impacto con elementos electr√≥nicos', confidence: 85 },
      { section: 'Puente', suggestion: 'Cambio radical de estilo', confidence: 75 },
      { section: 'Outro', suggestion: 'Cierre experimental con efectos', confidence: 80 }
    ],
    experimental: [
      { section: 'Intro', suggestion: 'Entrada con m√∫sica concreta', confidence: 70 },
      { section: 'Verso', suggestion: 'Ritmo con microtonalidad', confidence: 65 },
      { section: 'Pre-Coro', suggestion: 'Crescendo con s√≠ntesis granular', confidence: 70 },
      { section: 'Coro', suggestion: 'Impacto con distorsi√≥n extrema', confidence: 75 },
      { section: 'Puente', suggestion: 'Cambio de g√©nero completo', confidence: 70 },
      { section: 'Outro', suggestion: 'Cierre con elementos aleatorios', confidence: 65 }
    ]
  };

  return suggestions[creativityLevel] || suggestions.moderate;
}

// üéµ GENERAR INSTRUMENTACI√ìN
function generateInstrumentation(style: string, genre: string) {
  const instrumentations = {
    'rock': {
      primary: ['Guitarra el√©ctrica', 'Bajo', 'Bater√≠a'],
      secondary: ['Guitarra ac√∫stica', 'Piano', 'Sintetizadores'],
      effects: ['Distorsi√≥n', 'Reverb', 'Delay', 'Chorus']
    },
    'pop': {
      primary: ['Sintetizadores', 'Bater√≠a', 'Bajo'],
      secondary: ['Piano', 'Guitarra', 'Cuerdas'],
      effects: ['Compresi√≥n', 'EQ', 'Reverb', 'Auto-tune']
    },
    'electronic': {
      primary: ['Sintetizadores', 'Samplers', 'Drum Machine'],
      secondary: ['Efectos', 'Vocoders', 'Arp√©ggiadores'],
      effects: ['Filtros', 'Distorsi√≥n', 'Granular', 'Modulaci√≥n']
    },
    'acoustic': {
      primary: ['Guitarra ac√∫stica', 'Bajo ac√∫stico', 'Percusi√≥n'],
      secondary: ['Piano', 'Cuerdas', 'Arm√≥nica'],
      effects: ['Reverb natural', 'Compresi√≥n suave', 'EQ']
    }
  };

  return instrumentations[style.toLowerCase()] || instrumentations.pop;
}

// üé® GENERAR ELEMENTOS CREATIVOS
function generateCreativeElements(creativityLevel: string): string[] {
  const elements = {
    conservative: [
      'Variaciones sutiles en la din√°mica',
      'Agregar capas instrumentales',
      'Mejorar transiciones entre secciones'
    ],
    moderate: [
      'Cambios de tonalidad en el puente',
      'Efectos de delay y reverb',
      'Variaciones r√≠tmicas',
      'Elementos de percusi√≥n √©tnica'
    ],
    creative: [
      'Modulaciones inesperadas',
      'Efectos de granulado',
      'Samplers creativos',
      'Cambios de comp√°s',
      'Elementos de m√∫sica electr√≥nica'
    ],
    experimental: [
      'Microtonalidad',
      'Efectos de distorsi√≥n extrema',
      'Samplers de sonidos no musicales',
      'Cambios de tempo dram√°ticos',
      'Elementos de m√∫sica concreta',
      'S√≠ntesis granular'
    ]
  };

  return elements[creativityLevel] || elements.moderate;
}

// üîß GENERAR ESPECIFICACIONES T√âCNICAS
function generateTechnicalSpecs(style: string, mood: string) {
  const tempos = {
    'energetic': '140-160 BPM',
    'moderate': '120-140 BPM',
    'slow': '80-100 BPM',
    'melancholic': '70-90 BPM'
  };

  const keys = {
    'energetic': 'C mayor, G mayor',
    'moderate': 'C mayor, F mayor',
    'slow': 'A menor, D menor',
    'melancholic': 'A menor, E menor'
  };

  const dynamics = {
    'energetic': 'mf ‚Üí f ‚Üí ff',
    'moderate': 'mp ‚Üí mf ‚Üí f',
    'slow': 'p ‚Üí mp ‚Üí mf',
    'melancholic': 'pp ‚Üí p ‚Üí mp'
  };

  return {
    tempo: tempos[mood] || tempos.moderate,
    key: keys[mood] || keys.moderate,
    timeSignature: '4/4',
    dynamics: dynamics[mood] || dynamics.moderate
  };
}

// üíæ GUARDAR PROMPTS EN SUPABASE
async function savePromptsToSupabase(userId: string, promptResponse: GeneratorPromptResponse, request: GeneratorPromptRequest) {
  const supabaseUrl = process.env.SUPABASE_URL;
  const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

  if (!supabaseUrl || !supabaseKey) {
    console.warn('Supabase not configured, skipping save');
    return;
  }

  try {
    const response = await fetch(`${supabaseUrl}/rest/v1/generator_prompts`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${supabaseKey}`,
        'apikey': supabaseKey
      },
      body: JSON.stringify({
        user_id: userId,
        prompt: request.prompt,
        style: request.style,
        genre: request.genre,
        mood: request.mood,
        creativity_level: request.creativityLevel,
        prompt_data: promptResponse,
        created_at: new Date().toISOString()
      })
    });

    if (!response.ok) {
      console.error('Error saving prompts to Supabase:', response.status);
    }
  } catch (error) {
    console.error('Error saving prompts:', error);
  }
}
